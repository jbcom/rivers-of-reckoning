name: Asset Compilation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  compile-assets:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyxel
    - name: Validate procedural sprites
      run: |
        python -c "
        from src.first_python_rpg.map_data import SPRITES, BOSS_SPRITES
        print('✓ SPRITES dictionary loaded:', len(SPRITES), 'sprite types')
        print('✓ BOSS_SPRITES dictionary loaded:', len(BOSS_SPRITES), 'boss types')
        print('✓ All sprite functions are callable')
        for name, func in SPRITES.items():
            if not callable(func):
                raise ValueError(f'Sprite {name} is not callable')
        print('✓ Asset compilation validation passed')
        "
    - name: Test sprite rendering
      run: |
        python -c "
        import pyxel
        import sys
        sys.path.insert(0, 'src')
        from first_python_rpg.map_data import SPRITES
        
        # Test that sprites can be called without error
        # (We can't actually render without a display, but we can test function calls)
        try:
            # Mock pyxel functions for testing
            class MockPyxel:
                def rect(self, *args): pass
                def circ(self, *args): pass
                def tri(self, *args): pass
                def pset(self, *args): pass
                def line(self, *args): pass
            
            import first_python_rpg.map_data
            first_python_rpg.map_data.pyxel = MockPyxel()
            
            # Test each sprite function
            for name, func in SPRITES.items():
                func(10, 10, 8, 8)
                print(f'✓ {name} sprite renders without error')
            
            print('✓ All sprite rendering tests passed')
        except Exception as e:
            print(f'✗ Sprite rendering test failed: {e}')
            sys.exit(1)
        "